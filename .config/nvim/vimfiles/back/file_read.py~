#!/usr/bin/python3
# -*- coding: utf-8 -*-

# コマンドライン引数を処理する
import sys
import datetime
import argparse
import calendar

# 正規表現による検索
import re

# CSVファイルのライブラリ
import csv

# XMLファイルのライブラリ
import xml.etree.ElementTree




in_f = open(file='./input/e.csv',mode='r',encoding='cp932',newline='\r\n')
# csvファイルをparse
line=csv.reader(in_f, delimiter=",", doublequote=True, lineterminator="\r\n", quotechar='"', skipinitialspace=True)
for row in line:
  matchOB = re.search(r"^#", row[0])
  if not (matchOB):
        for row in line:
        #row[0]で必要な項目を取得することができる
        with open(row[1], mode='w') as out_f:
        out_f.write(s)
f.close()







import xml.etree.ElementTree

d = "~/dev/python3.6/xml_edit/input"
f = "perform_templ.xml"

print (d + '/' + f)
etree = xml.etree.ElementTree.parse(d + '/' f) # fileをxml形式で読み込み
root = xmlDom.getroot()
path = etree.find(".//path").text.encode('utf_8')
#TimeStart = etree.find(".//TimeStart").text.encode('utf_8')
#TimeStop = etree.find(".//TimeStop").text.encode('utf_8')
#print path
#print TimeStart
#print TimeStop
#
#etree.find(".//TimeStart").text = "1234"
#etree.find(".//TimeStop").text = "5678"
#
#
#TimeStart = etree.find(".//TimeStart").text.encode('utf_8')
#TimeStop = etree.find(".//TimeStop").text.encode('utf_8')
#print path
#print TimeStart
#print TimeStop



import xml.etree.ElementTree as ET

# rootという要素を作成
root = ET.Element('root')
# rootが根っこの要素だと指定
tree = ET.ElementTree(element=root)
# 第一引数の子要素として第二引数を指定
fruits = ET.SubElement(root, 'fruits')

fruit = ET.SubElement(fruits, 'fruit')
name = ET.SubElement(fruit, 'name')
# 要素の内容を指定
name.text = 'apple'
price = ET.SubElement(fruit, 'price')
price.text = '￥100'

fruit = ET.SubElement(fruits, 'fruit')
name = ET.SubElement(fruit, 'name')
name.text = 'strawberry'
price = ET.SubElement(fruit, 'price')
price.text = '￥500'

tree.write('test.xml', encoding='utf-8')




# モジュール属性 argv を取得するため
import sys
import datetime
import argparse
import calendar

parser = argparse.ArgumentParser(
            prog="program name here", #プログラム名
            usage="usage goes here", #プログラムの利用方法
            description="description goes here", #「optional arguments」の前に表示される説明文
            epilog = "dddddddddd", #「optional arguments」後に表示される文字列
            add_help = True #[-h],[--help]オプションをデフォルトで追加するか
            )

group = parser.add_mutually_exclusive_group(required = True)
group.add_argument('-d', '--date' ,#オプション引数
          type=str,
          metavar = "YYYYMM",
          help = "specification date"
            )

group = parser.add_mutually_exclusive_group(required = True)
group.add_argument('-f', '--filename' ,#オプション引数
          type=str,
          metavar = "csv_file",
          help = "csv_filename"
            )


_args = parser.parse_args()

if (_args):
  idate = _args.date+'01'
else:
  idate = ""

if (idate != ""):
  # datetime変換をすることで日付フォーマットをチェックする
  try:
    s_day=datetime.datetime.strptime(idate, '%Y%m%d')
    print("success")
    print(day1)
  except ValueError:
    print("Error -d YYYYMMDD")
  except:
    print("error")

_, lastday = calendar.monthrange(int(s_day.strftime('%Y')),int(s_day.strftime('%m')))
print("{0}".format(lastday))
e_day = datetime.datetime.strptime(s_day.strftime('%Y%m')+"{0}".format(lastday), '%Y%m%d')

start_day=s_day.strftime('%Y%m%d')
end_day=e_day.strftime('%Y%m%d')

print ("start day {0}".format(start_day))
print ("end   day {0}".format(end_day))

dt = s_day - datetime.datetime(1899, 12, 30)
print (dt.days)
start_num =((dt.days - 25569)*86400-32400)*1000
print(start_num)
