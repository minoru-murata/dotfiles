['/home/dev001/.config/nvim/init.vim', '/home/dev001/.config/nvim/dein/toml/dein.toml', '/home/dev001/.config/nvim/dein/toml/dein_lazy.toml']
{"lexima.vim": {"lazy": 1, "path": "/home/dev001/.config/nvim/dein/repos/github.com/cohama/lexima.vim", "repo": "cohama/lexima.vim", "on_event": ["InsertEnter"], "normalized_name": "lexima", "merged": 0, "type": "git", "rtp": "/home/dev001/.config/nvim/dein/repos/github.com/cohama/lexima.vim", "sourced": 0, "on_i": 1, "name": "lexima.vim"}, "neco-look": {"lazy": 1, "on_source": ["deoplete"], "path": "/home/dev001/.config/nvim/dein/repos/github.com/ujihisa/neco-look", "repo": "ujihisa/neco-look", "merged": 0, "normalized_name": "neco-look", "type": "git", "rtp": "/home/dev001/.config/nvim/dein/repos/github.com/ujihisa/neco-look", "sourced": 0, "name": "neco-look"}, "vim-gitgutter": {"lazy": 0, "path": "/home/dev001/.config/nvim/dein/repos/github.com/airblade/vim-gitgutter", "repo": "airblade/vim-gitgutter", "hook_add": "        let g:gitgutter_highlight_lines = 1\n        set updatetime=250\n        let g:gitgutter_sign_added = '✚'\n        let g:gitgutter_sign_modified = '➤'\n        let g:gitgutter_sign_removed = '✘'\n        let g:gitgutter_sign_modified_removed = \"➜\"\n        autocmd Vimenter,Colorscheme * :hi GitGutterAddLine ctermfg=none ctermbg=17\n        autocmd Vimenter,Colorscheme * :hi GitGutterChangeLine ctermfg=none ctermbg=53\n        autocmd Vimenter,Colorscheme * :hi GitGutterDeleteLine ctermfg=none ctermbg=52\n        autocmd Vimenter,Colorscheme * :hi GitGutterChangeDeleteLine ctermfg=none ctermbg=53\n\n        let g:NERDTreeIndicatorMapCustom = { \"Modified\"  : \"➤\", \"Staged\"    : \"✚\", \"Untracked\" : \"✭\", \"Renamed\"   : \"➜\", \"Unmerged\"  : \"═\", \"Deleted\"   : \"✖\", \"Dirty\"     : \"✗\", \"Clean\"     : \"✔︎\", 'Ignored'   : '☒', \"Unknown\"   : \"?\" }\n    ", "merged": 1, "normalized_name": "gitgutter", "type": "git", "rtp": "/home/dev001/.config/nvim/dein/repos/github.com/airblade/vim-gitgutter", "sourced": 1, "name": "vim-gitgutter"}, "dein.vim": {"lazy": 0, "path": "/home/dev001/.config/nvim/dein/repos/github.com/Shougo/dein.vim", "repo": "Shougo/dein.vim", "normalized_name": "dein", "merged": 0, "type": "git", "rtp": "/home/dev001/.config/nvim/dein/repos/github.com/Shougo/dein.vim", "sourced": 1, "name": "dein.vim"}, "caw.vim": {"lazy": 1, "path": "/home/dev001/.config/nvim/dein/repos/github.com/tyru/caw.vim", "repo": "tyru/caw.vim", "on_map": ["<Plug>(caw:hatpos:toggle)"], "normalized_name": "caw", "merged": 0, "type": "git", "rtp": "/home/dev001/.config/nvim/dein/repos/github.com/tyru/caw.vim", "sourced": 0, "dummy_mappings": [["n", "<Plug>(caw:hatpos:toggle)", "nnoremap <unique><silent> <Plug>(caw:hatpos:toggle) :\u0015call dein#autoload#_on_map('<lt>Plug>(caw:hatpos:toggle)', 'caw.vim','n')<CR>"], ["x", "<Plug>(caw:hatpos:toggle)", "xnoremap <unique><silent> <Plug>(caw:hatpos:toggle) :\u0015call dein#autoload#_on_map('<lt>Plug>(caw:hatpos:toggle)', 'caw.vim','x')<CR>"]], "name": "caw.vim"}, "neco-syntax": {"lazy": 1, "on_source": ["deoplete"], "path": "/home/dev001/.config/nvim/dein/repos/github.com/Shougo/neco-syntax", "repo": "Shougo/neco-syntax", "merged": 0, "normalized_name": "neco-syntax", "type": "git", "rtp": "/home/dev001/.config/nvim/dein/repos/github.com/Shougo/neco-syntax", "sourced": 0, "name": "neco-syntax"}, "vim-trailing-whitespace": {"lazy": 0, "path": "/home/dev001/.config/nvim/dein/repos/github.com/bronson/vim-trailing-whitespace", "repo": "bronson/vim-trailing-whitespace", "hook_add": "        let g:extra_whitespace_ignored_filetypes = ['unite']\n        autocmd BufWritePre * :FixWhitespace\n    ", "merged": 1, "normalized_name": "trailing-whitespace", "type": "git", "rtp": "/home/dev001/.config/nvim/dein/repos/github.com/bronson/vim-trailing-whitespace", "sourced": 1, "name": "vim-trailing-whitespace"}, "syntastic": {"lazy": 0, "path": "/home/dev001/.config/nvim/dein/repos/github.com/vim-syntastic/syntastic", "repo": "vim-syntastic/syntastic", "normalized_name": "syntastic", "merged": 1, "type": "git", "rtp": "/home/dev001/.config/nvim/dein/repos/github.com/vim-syntastic/syntastic", "sourced": 1, "name": "syntastic"}, "vim-fugitive": {"lazy": 0, "path": "/home/dev001/.config/nvim/dein/repos/github.com/tpope/vim-fugitive", "repo": "tpope/vim-fugitive", "normalized_name": "fugitive", "merged": 1, "type": "git", "rtp": "/home/dev001/.config/nvim/dein/repos/github.com/tpope/vim-fugitive", "sourced": 1, "name": "vim-fugitive"}, "lightline.vim": {"lazy": 0, "path": "/home/dev001/.config/nvim/dein/repos/github.com/itchyny/lightline.vim", "repo": "itchyny/lightline.vim", "hook_add": "        let g:lightline = { 'colorscheme': 'molokai', 'mode_map': {'c': 'NORMAL'}, 'active': { 'left': [ ['mode', 'paste'], ['fugitive', 'gitgutter', 'filename'], ], 'right': [ ['lineinfo', 'syntastic'], ['percent'], ['fileencoding', 'filetype'], ] }, 'component_function': { 'modified': 'MyModified', 'readonly': 'MyReadonly', 'fugitive': 'MyFugitive', 'filename': 'MyFilename', 'fileformat': 'MyFileformat', 'filetype': 'MyFiletype', 'fileencoding': 'MyFileencoding', 'mode': 'MyMode', 'syntastic': 'SyntasticStatuslineFlag', 'charcode': 'MyCharCode', 'gitgutter': 'MyGitGutter', }, 'separator': {'left': '', 'right': ''}, 'subseparator': {'left': '>', 'right': '<'} }\n\n        function! MyModified()\n            return &ft =~ 'help\\|vimfiler\\|gundo' ? '' : &modified ? '➜' : &modifiable ? '' : '-'\n        endfunction\n\n        function! MyReadonly()\n            return &ft !~? 'help\\|vimfiler\\|gundo' && &ro ? '⚠' : ''\n        endfunction\n\n        function! MyFilename()\n            return ('' != MyReadonly() ? MyReadonly() . ' ' : '') . (&ft == 'vimfiler' ? vimfiler#get_status_string() :  &ft == 'unite' ? unite#get_status_string() :  &ft == 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') : '' != expand('%:t') ? expand('%:t') : '[No Name]') . ('' != MyModified() ? ' ' . MyModified() : '')\n        endfunction\n\n        function! MyFugitive()\n            try\n                if &ft !~? 'vimfiler\\|gundo' && exists('*fugitive#head')\n                    let _ = fugitive#head()\n                    return strlen(_) ? '@'._ : ''\n                endif\n            catch\n            endtry\n            return ''\n        endfunction\n\n        function! MyFileformat()\n            return winwidth('.') > 70 ? &fileformat : ''\n        endfunction\n\n        function! MyFiletype()\n            return winwidth('.') > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''\n        endfunction\n\n        function! MyFileencoding()\n            return winwidth('.') > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''\n        endfunction\n\n        function! MyMode()\n            return winwidth('.') > 60 ? lightline#mode() : ''\n        endfunction\n\n        function! MyGitGutter()\n            if ! exists('*GitGutterGetHunkSummary') || ! get(g:, 'gitgutter_enabled', 0) || winwidth('.') <= 90\n                return ''\n            endif\n            let symbols = [ '✚', '➤', '✘' ]\n            let hunks = GitGutterGetHunkSummary()\n            let ret = []\n            for i in [0, 1, 2]\n                if hunks[i] > 0\n                    call add(ret, symbols[i] . hunks[i])\n                endif\n            endfor\n            return join(ret, ' ')\n        endfunction\n\n        function! MyCharCode()\n            if winwidth('.') <= 70\n                return ''\n            endif\n\n            redir => ascii\n            silent! ascii\n            redir END\n\n            if match(ascii, 'NUL') != -1\n                return 'NUL'\n            endif\n\n            let nrformat = '0x%02x'\n\n            let encoding = (&fenc == '' ? &enc : &fenc)\n\n            if encoding == 'utf-8'\n                let nrformat = '0x%04x'\n            endif\n\n            let [str, char, nr; rest] = matchlist(ascii, '\\v\\<(.{-1,})\\>\\s*([0-9]+)')\n\n            let nr = printf(nrformat, nr)\n\n            return \"'\". char .\"' \". nr\n        endfunction\n    ", "merged": 1, "normalized_name": "lightline", "type": "git", "rtp": "/home/dev001/.config/nvim/dein/repos/github.com/itchyny/lightline.vim", "sourced": 1, "name": "lightline.vim"}, "deoplete-jedi": {"lazy": 1, "path": "/home/dev001/.config/nvim/dein/repos/github.com/zchee/deoplete-jedi", "repo": "zchee/deoplete-jedi", "hook_add": "        let g:deoplete#sources#jedi#python_path = '/usr/bin/python3.6'\n    ", "merged": 0, "normalized_name": "deoplete-jedi", "type": "git", "rtp": "/home/dev001/.config/nvim/dein/repos/github.com/zchee/deoplete-jedi", "sourced": 0, "on_ft": ["python"], "name": "deoplete-jedi"}, "vim-over": {"lazy": 0, "path": "/home/dev001/.config/nvim/dein/repos/github.com/osyo-manga/vim-over", "repo": "osyo-manga/vim-over", "normalized_name": "over", "merged": 1, "type": "git", "rtp": "/home/dev001/.config/nvim/dein/repos/github.com/osyo-manga/vim-over", "sourced": 1, "name": "vim-over"}, "nerdtree-git-plugin": {"lazy": 1, "on_source": ["NERDTree"], "path": "/home/dev001/.config/nvim/dein/repos/github.com/Xuyuanp/nerdtree-git-plugin", "repo": "Xuyuanp/nerdtree-git-plugin", "merged": 0, "normalized_name": "nerdtree-git-plugin", "type": "git", "rtp": "/home/dev001/.config/nvim/dein/repos/github.com/Xuyuanp/nerdtree-git-plugin", "sourced": 0, "name": "nerdtree-git-plugin"}, "vim-toml": {"lazy": 1, "path": "/home/dev001/.config/nvim/dein/repos/github.com/cespare/vim-toml", "repo": "cespare/vim-toml", "normalized_name": "toml", "merged": 0, "type": "git", "rtp": "/home/dev001/.config/nvim/dein/repos/github.com/cespare/vim-toml", "sourced": 0, "on_ft": ["toml"], "name": "vim-toml"}, "vim-indent-guides": {"lazy": 0, "path": "/home/dev001/.config/nvim/dein/repos/github.com/nathanaelkane/vim-indent-guides", "repo": "nathanaelkane/vim-indent-guides", "hook_add": "        let g:indent_guides_enable_on_vim_startup = 1\n        let g:indent_guides_start_level = 2\n        let g:indent_guides_color_change_percent = 10\n        let g:indent_guides_guide_size = 0\n        let g:indent_guides_autocolors = 0\n        autocmd Vimenter,Colorscheme * :hi IndentGuidesOdd  guibg=#005500 ctermbg=0\n        autocmd Vimenter,Colorscheme * :hi IndentGuidesEven guibg=#000055 ctermbg=235\n    ", "merged": 1, "normalized_name": "indent-guides", "type": "git", "rtp": "/home/dev001/.config/nvim/dein/repos/github.com/nathanaelkane/vim-indent-guides", "sourced": 1, "name": "vim-indent-guides"}, "deoplete.nvim": {"lazy": 1, "path": "/home/dev001/.config/nvim/dein/repos/github.com/Shougo/deoplete.nvim", "if": 1, "name": "deoplete.nvim", "hook_add": "        let g:deoplete#enable_at_startup = 1\n\n        inoremap <expr><C-j> pumvisible() ? \"\\<C-n>\" : \"\\<C-j>\"\n        inoremap <expr><C-k> pumvisible() ? \"\\<C-p>\" : \"\\<C-k>\"\n\n        if has('conceal')\n            set conceallevel=2 concealcursor=niv\n        endif\n    ", "merged": 0, "normalized_name": "deoplete", "type": "git", "rtp": "/home/dev001/.config/nvim/dein/repos/github.com/Shougo/deoplete.nvim", "sourced": 0, "repo": "Shougo/deoplete.nvim"}, "nerdtree": {"lazy": 1, "dummy_commands": [["NERDTreeToggle", "command -complete=customlist,dein#autoload#_dummy_complete -bang -bar -range -nargs=* NERDTreeToggle call dein#autoload#_on_cmd('NERDTreeToggle', 'nerdtree', <q-args>,  expand('<bang>'), expand('<line1>'), expand('<line2>'))"]], "sourced": 0, "name": "nerdtree", "repo": "scrooloose/nerdtree", "merged": 0, "normalized_name": "nerdtree", "type": "git", "path": "/home/dev001/.config/nvim/dein/repos/github.com/scrooloose/nerdtree", "rtp": "/home/dev001/.config/nvim/dein/repos/github.com/scrooloose/nerdtree", "on_cmd": ["NERDTreeToggle"], "hook_add": "        let g:NERDTreeIgnore = ['\\.swp$', '\\.meta$']\n        let g:NERDTreeQuitOnOpen = 1\n    "}, "vim-nerdtree-tabs": {"lazy": 1, "on_source": ["NERDTree"], "path": "/home/dev001/.config/nvim/dein/repos/github.com/jistr/vim-nerdtree-tabs", "repo": "jistr/vim-nerdtree-tabs", "merged": 0, "normalized_name": "nerdtree-tabs", "type": "git", "rtp": "/home/dev001/.config/nvim/dein/repos/github.com/jistr/vim-nerdtree-tabs", "sourced": 0, "name": "vim-nerdtree-tabs"}, "neco-vim": {"lazy": 1, "on_source": ["deoplete"], "path": "/home/dev001/.config/nvim/dein/repos/github.com/Shougo/neco-vim", "repo": "Shougo/neco-vim", "merged": 0, "normalized_name": "neco", "type": "git", "rtp": "/home/dev001/.config/nvim/dein/repos/github.com/Shougo/neco-vim", "sourced": 0, "name": "neco-vim"}, "gundo.vim": {"lazy": 1, "hook_add": "        let g:gundo_width = 30\n        let g:gundo_help = 0\n        let g:gundo_preview_bottom = 1\n        let g:gundo_preview_statusline = 1\n        let g:gundo_tree_statusline = 1\n        let g:gundo_return_on_revert = 0\n    ", "dummy_commands": [["GundoToggle", "command -complete=customlist,dein#autoload#_dummy_complete -bang -bar -range -nargs=* GundoToggle call dein#autoload#_on_cmd('GundoToggle', 'gundo.vim', <q-args>,  expand('<bang>'), expand('<line1>'), expand('<line2>'))"]], "if": 1, "name": "gundo.vim", "on_cmd": ["GundoToggle"], "merged": 0, "normalized_name": "gundo", "type": "git", "path": "/home/dev001/.config/nvim/dein/repos/github.com/sjl/gundo.vim", "rtp": "/home/dev001/.config/nvim/dein/repos/github.com/sjl/gundo.vim", "sourced": 0, "repo": "sjl/gundo.vim"}}
{}
